# Initial pipeline
trigger:
- azure

jobs:
# Try dependent job to setup CVMFS on a host to subsequently run docker
- job: ubuntu_1604_cvmfs
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: | 
      sudo apt-get install lsb-release
      wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
      sudo dpkg -i cvmfs-release-latest_all.deb
      rm -f cvmfs-release-latest_all.deb
      sudo apt-get update
      sudo apt-get install cvmfs cvmfs-config-default
      sudo cvmfs_config setup
      echo  "CVMFS_REPOSITORIES=sft.cern.ch" | sudo tee -a  /etc/cvmfs/default.local > /dev/null
      echo  "CVMFS_HTTP_PROXY=DIRECT"  | sudo tee -a  /etc/cvmfs/default.local > /dev/null
      sudo service autofs restart
      sudo cvmfs_config probe
    displayName: Install CVMFS
  - script: |
      docker pull centos:7
      docker run -itd \
        -v $(Pipeline.Workspace):$(Pipeline.Workspace) \
        -v /cvmfs:/cvmfs:shared \
        --name centos-7 \
        centos:7
    displayName: Start Docker
  - script: |
      docker ps -a
      docker exec centos-7 env
      docker exec centos-7 ls -larth $(Pipeline.Workspace)
      docker exec centos-7 ls -larth /cvmfs/sft.cern.ch/lcg/views


- job: ubuntu_1804_cvmfs
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      sudo apt-get install lsb-release
      wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
      sudo dpkg -i cvmfs-release-latest_all.deb
      rm -f cvmfs-release-latest_all.deb
      sudo apt-get update
      sudo apt-get install cvmfs cvmfs-config-default
      sudo cvmfs_config setup
      echo  "CVMFS_REPOSITORIES=sft.cern.ch" | sudo tee -a  /etc/cvmfs/default.local > /dev/null
      echo  "CVMFS_HTTP_PROXY=DIRECT"  | sudo tee -a  /etc/cvmfs/default.local > /dev/null
      sudo service autofs restart
      sudo cvmfs_config probe
    displayName: Install CVMFS

  - script: mkdir build
    displayName: Create Build Directory
  
  - script: |
      # Native azure host sets CC/CXX, but LCG setup scripts won't update if set
      unset CC CXX FC
      env | sort
      source /cvmfs/sft.cern.ch/lcg/views/LCG_96/x86_64-ubuntu1804-gcc8-dbg/setup.sh
      env | sort
      cmake -DCMAKE_BUILD_TYPE=Debug ..
      cmake --build .
      ctest -VV
    workingDirectory: build
    displayName: CMake Configure/Build/Test under CVMFS

- job: Hosted
  strategy:
    matrix:
      ubuntu-18.04:
        imageName: 'ubuntu-18.04'
      macos-10.14:
        imageName: 'macos-10.14'
  pool:
    vmImage: $(imageName)
  steps:
  - script: brew install boost pkg-config libgit2 fmt
    condition: startsWith(variables.imageName,'macos')
 
  # FMT is only 4.0 on Ubuntu, so will need to build/cache!
  - script: sudo apt install libgit2-dev googletest
    displayName: Install System Build Dependencies
    condition: startsWith(variables.imageName,'ubuntu')

  # Cache will go here...
  - task: Cache@2
    inputs:
      key: 'cppdeps | "$(Agent.OS)"'
      path: $(Pipeline.Workspace)/fmt.install
      cacheHitVar: DEPS_CACHE_RESTORED
    displayName: Cache/Restore Local Build Dependencies
    condition: startsWith(variables.imageName,'ubuntu')
  
  - script : |
      git clone https://github.com/fmtlib/fmt.git fmt.git
      cd fmt.git
      git checkout 5.2.1
      cmake -DCMAKE_INSTALL_PREFIX=$(Pipeline.Workspace)/fmt.install -DBUILD_SHARED_LIBS=ON -DCMAKE_CXX_STANDARD=17 -DFMT_DOC=OFF -DFMT_TEST=OFF .
      cmake --build . --target install
    displayName: Build fmt 5.2
    condition: and(startsWith(variables.imageName,'ubuntu'), ne(variables.DEPS_CACHE_RESTORED,'true'))
  
  - script: mkdir build
    displayName: Create Build Directory
  
  - script: cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=$(Pipeline.Workspace)/fmt.install ..
    displayName: CMake Configure
    workingDirectory: build
  
  - script: cmake --build . --config Debug
    displayName: CMake Build
    workingDirectory: build
  
  - script: ctest -VV
    displayName: CTest
    workingDirectory: build

- job: Windows
  pool:
    vmImage: 'windows-latest'
  variables:
    vcpkgGitRef: '2019.10'
    system.debug: true
  steps:
  - task: Cache@2
    displayName: Cache/Restore vcpkg
    inputs:
      key: cppdeps | v11 | "$(vcpkgGitRef)" |  "$(Agent.OS)"
      path: '$(Build.BinariesDirectory)/vcpkg'
  - task: run-vcpkg@0 
    displayName: 'Run vcpkg'
    inputs:
      vcpkgGitCommitId: $(vcpkgGitRef)
      vcpkgTriplet: x64-windows
      vcpkgArguments: tool-meson
      vcpkgArtifactIgnoreEntries: "buildtrees\ndownloads\npackages\n"
  #- task: run-cmake@0
  #  displayName: 'Run CMake with Ninja'
  #  inputs:
  #    useVcpkgToolchainFile: true
  #    vcpkgTriplet: x64-windows
  #    buildWithCMakeArgs: '-- -v'
  # Could try and build pkgconf... (needs patching...)
  # Better thorough vcpkg, as can then use directly...
  - script: |
      git clone https://github.com/drbenmorgan/pkgconf.git
        cd pkgconf
        python -m pip install meson ninja
        meson -Dtests=OFF .
        ninja -v
    
    workingDirectory: $(Build.BinariesDirectory)
    env:
      PKG_CONFIG_PATH: $(Build.BinariesDirectory)/vcpkg/installed/x64-windows/lib/pkgconfig

